 How Java Script works behind the scenes:
                
javascript --> Parser --> Translate to Machine Code --> Execute.

Execution context ||
Default will be GLobal execution context
Global Execution context will be the variables or functions which are not inside the function or object.
Execution context will be executed when we call functions and it will be on the top of GLobal context and until it completes it will be the
active context and in the function if other function calls then it will be the third layer .


Execution Context as object

    variable object (vo) : function arguments,inner variable declarations,function declarations.
    scope chains : current variable objects,variable objects of all its parents.
    this variable : 

when we call function a new execution context is put on top of execution stack.happens in 2 phases
1.Creation phase
2.Execution phase.

Creation phase :
creation of variable object
creation of scope chain
determine value of this variable: here the properties of execution context object is defined.

Then execution phase:
The code of the function that generated the current execution context is ran line by line.

The main thing is the when object is created So then in creation phase it scann for function declarations and variable declaration for each function is created in variable object.pointing to the function.
same thing happened to the variable declarations as well but variables set to undefined as functions are not which we can see in  this example.
Here in this below example we can see we call teh function first before declaring it and it works and it just for functions not for variables.

ageCalc()````
function ageCalc(year) {} 

And it will only works with function declaration only not for the function expression. because it is not a function declaration its a expression.
ageCalc()
var function ageCalc(year) {} 

and for the variables it definitely shows undefined and be aware that it is showing undefined because in hoisting variable is declared if it was not declared then you wont get undefined as a result.
console.log(age);
var age = 23; //global execution object

function foo() {
    age = 65;  //execution object not global  so both are different variables
    console.log(age)
}


                                Scope chain

gives the naswers where the certain value  is
function creates the scope /environment to store the variables  in other languages you can create the scope in for loop etc but in javascript function is the only option.

Global scope
Local Scope 


                            This keyword

this keyword gives where it is default globally which is window
and in method if we call the result of this keyword if we print then it will be the object not the window
ex : john = {
    name : 'john',
    ageCalc : function () {
        console.log(this)  -- result is the object.
     }function inner () {
         console.log(this)  -- result is window.
     }inner()
}
john.ageCalc()


mike.ageCalc = john.ageCalc   -- here no paranthesis because for calling paranthesis is required not for assigning;
mike.ageCalc()  -- and now the this keyword shows the result of mike object not the john object.

